import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, e as element, a as space, t as text, f as claim_element, g as children, b as detach_dev, c as claim_space, h as claim_text, j as attr_dev, k as add_location, l as insert_dev, m as append_dev, n as noop } from './client.d8a0e26f.js';

/* src/routes/base.svelte generated by Svelte v3.20.1 */

const file = "src/routes/base.svelte";

function create_fragment(ctx) {
	let section;
	let div4;
	let header;
	let div3;
	let div0;
	let a0;
	let img;
	let img_src_value;
	let t0;
	let span3;
	let span0;
	let t1;
	let span1;
	let t2;
	let span2;
	let t3;
	let div2;
	let div1;
	let a1;
	let t4;
	let t5;
	let a2;
	let t6;
	let t7;
	let a3;
	let t8;
	let t9;
	let span6;
	let a4;
	let span4;
	let i;
	let t10;
	let span5;
	let t11;
	let t12;
	let div6;
	let div5;
	let h1;
	let t13;
	let t14;
	let h2;
	let t15;
	let t16;
	let div8;
	let nav;
	let div7;
	let ul;
	let li0;
	let a5;
	let t17;
	let t18;
	let li1;
	let a6;
	let t19;
	let t20;
	let li2;
	let a7;
	let t21;
	let t22;
	let li3;
	let a8;
	let t23;
	let t24;
	let li4;
	let a9;
	let t25;
	let t26;
	let li5;
	let a10;
	let t27;

	const block = {
		c: function create() {
			section = element("section");
			div4 = element("div");
			header = element("header");
			div3 = element("div");
			div0 = element("div");
			a0 = element("a");
			img = element("img");
			t0 = space();
			span3 = element("span");
			span0 = element("span");
			t1 = space();
			span1 = element("span");
			t2 = space();
			span2 = element("span");
			t3 = space();
			div2 = element("div");
			div1 = element("div");
			a1 = element("a");
			t4 = text("Home");
			t5 = space();
			a2 = element("a");
			t6 = text("Examples");
			t7 = space();
			a3 = element("a");
			t8 = text("Documentation");
			t9 = space();
			span6 = element("span");
			a4 = element("a");
			span4 = element("span");
			i = element("i");
			t10 = space();
			span5 = element("span");
			t11 = text("Download");
			t12 = space();
			div6 = element("div");
			div5 = element("div");
			h1 = element("h1");
			t13 = text("Title");
			t14 = space();
			h2 = element("h2");
			t15 = text("Subtitle");
			t16 = space();
			div8 = element("div");
			nav = element("nav");
			div7 = element("div");
			ul = element("ul");
			li0 = element("li");
			a5 = element("a");
			t17 = text("Overview");
			t18 = space();
			li1 = element("li");
			a6 = element("a");
			t19 = text("Modifiers");
			t20 = space();
			li2 = element("li");
			a7 = element("a");
			t21 = text("Grid");
			t22 = space();
			li3 = element("li");
			a8 = element("a");
			t23 = text("Elements");
			t24 = space();
			li4 = element("li");
			a9 = element("a");
			t25 = text("Components");
			t26 = space();
			li5 = element("li");
			a10 = element("a");
			t27 = text("Layout");
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div4 = claim_element(section_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			header = claim_element(div4_nodes, "HEADER", { class: true });
			var header_nodes = children(header);
			div3 = claim_element(header_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			a0 = claim_element(div0_nodes, "A", { class: true });
			var a0_nodes = children(a0);
			img = claim_element(a0_nodes, "IMG", { src: true, alt: true });
			a0_nodes.forEach(detach_dev);
			t0 = claim_space(div0_nodes);
			span3 = claim_element(div0_nodes, "SPAN", { class: true, "data-target": true });
			var span3_nodes = children(span3);
			span0 = claim_element(span3_nodes, "SPAN", {});
			children(span0).forEach(detach_dev);
			t1 = claim_space(span3_nodes);
			span1 = claim_element(span3_nodes, "SPAN", {});
			children(span1).forEach(detach_dev);
			t2 = claim_space(span3_nodes);
			span2 = claim_element(span3_nodes, "SPAN", {});
			children(span2).forEach(detach_dev);
			span3_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t3 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { id: true, class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			a1 = claim_element(div1_nodes, "A", { class: true });
			var a1_nodes = children(a1);
			t4 = claim_text(a1_nodes, "Home");
			a1_nodes.forEach(detach_dev);
			t5 = claim_space(div1_nodes);
			a2 = claim_element(div1_nodes, "A", { class: true });
			var a2_nodes = children(a2);
			t6 = claim_text(a2_nodes, "Examples");
			a2_nodes.forEach(detach_dev);
			t7 = claim_space(div1_nodes);
			a3 = claim_element(div1_nodes, "A", { class: true });
			var a3_nodes = children(a3);
			t8 = claim_text(a3_nodes, "Documentation");
			a3_nodes.forEach(detach_dev);
			t9 = claim_space(div1_nodes);
			span6 = claim_element(div1_nodes, "SPAN", { class: true });
			var span6_nodes = children(span6);
			a4 = claim_element(span6_nodes, "A", { class: true });
			var a4_nodes = children(a4);
			span4 = claim_element(a4_nodes, "SPAN", { class: true });
			var span4_nodes = children(span4);
			i = claim_element(span4_nodes, "I", { class: true });
			children(i).forEach(detach_dev);
			span4_nodes.forEach(detach_dev);
			t10 = claim_space(a4_nodes);
			span5 = claim_element(a4_nodes, "SPAN", {});
			var span5_nodes = children(span5);
			t11 = claim_text(span5_nodes, "Download");
			span5_nodes.forEach(detach_dev);
			a4_nodes.forEach(detach_dev);
			span6_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			header_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			t12 = claim_space(section_nodes);
			div6 = claim_element(section_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			h1 = claim_element(div5_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t13 = claim_text(h1_nodes, "Title");
			h1_nodes.forEach(detach_dev);
			t14 = claim_space(div5_nodes);
			h2 = claim_element(div5_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t15 = claim_text(h2_nodes, "Subtitle");
			h2_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			t16 = claim_space(section_nodes);
			div8 = claim_element(section_nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			nav = claim_element(div8_nodes, "NAV", { class: true });
			var nav_nodes = children(nav);
			div7 = claim_element(nav_nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			ul = claim_element(div7_nodes, "UL", {});
			var ul_nodes = children(ul);
			li0 = claim_element(ul_nodes, "LI", { class: true });
			var li0_nodes = children(li0);
			a5 = claim_element(li0_nodes, "A", {});
			var a5_nodes = children(a5);
			t17 = claim_text(a5_nodes, "Overview");
			a5_nodes.forEach(detach_dev);
			li0_nodes.forEach(detach_dev);
			t18 = claim_space(ul_nodes);
			li1 = claim_element(ul_nodes, "LI", {});
			var li1_nodes = children(li1);
			a6 = claim_element(li1_nodes, "A", {});
			var a6_nodes = children(a6);
			t19 = claim_text(a6_nodes, "Modifiers");
			a6_nodes.forEach(detach_dev);
			li1_nodes.forEach(detach_dev);
			t20 = claim_space(ul_nodes);
			li2 = claim_element(ul_nodes, "LI", {});
			var li2_nodes = children(li2);
			a7 = claim_element(li2_nodes, "A", {});
			var a7_nodes = children(a7);
			t21 = claim_text(a7_nodes, "Grid");
			a7_nodes.forEach(detach_dev);
			li2_nodes.forEach(detach_dev);
			t22 = claim_space(ul_nodes);
			li3 = claim_element(ul_nodes, "LI", {});
			var li3_nodes = children(li3);
			a8 = claim_element(li3_nodes, "A", {});
			var a8_nodes = children(a8);
			t23 = claim_text(a8_nodes, "Elements");
			a8_nodes.forEach(detach_dev);
			li3_nodes.forEach(detach_dev);
			t24 = claim_space(ul_nodes);
			li4 = claim_element(ul_nodes, "LI", {});
			var li4_nodes = children(li4);
			a9 = claim_element(li4_nodes, "A", {});
			var a9_nodes = children(a9);
			t25 = claim_text(a9_nodes, "Components");
			a9_nodes.forEach(detach_dev);
			li4_nodes.forEach(detach_dev);
			t26 = claim_space(ul_nodes);
			li5 = claim_element(ul_nodes, "LI", {});
			var li5_nodes = children(li5);
			a10 = claim_element(li5_nodes, "A", {});
			var a10_nodes = children(a10);
			t27 = claim_text(a10_nodes, "Layout");
			a10_nodes.forEach(detach_dev);
			li5_nodes.forEach(detach_dev);
			ul_nodes.forEach(detach_dev);
			div7_nodes.forEach(detach_dev);
			nav_nodes.forEach(detach_dev);
			div8_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "https://bulma.io/images/bulma-type-white.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "Logo");
			add_location(img, file, 7, 12, 257);
			attr_dev(a0, "class", "navbar-item");
			add_location(a0, file, 6, 10, 221);
			add_location(span0, file, 10, 12, 428);
			add_location(span1, file, 11, 12, 454);
			add_location(span2, file, 12, 12, 480);
			attr_dev(span3, "class", "navbar-burger burger");
			attr_dev(span3, "data-target", "navbarMenuHeroC");
			add_location(span3, file, 9, 10, 350);
			attr_dev(div0, "class", "navbar-brand");
			add_location(div0, file, 5, 8, 184);
			attr_dev(a1, "class", "navbar-item is-active");
			add_location(a1, file, 17, 12, 629);
			attr_dev(a2, "class", "navbar-item");
			add_location(a2, file, 20, 12, 711);
			attr_dev(a3, "class", "navbar-item");
			add_location(a3, file, 23, 12, 787);
			attr_dev(i, "class", "fab fa-github");
			add_location(i, file, 29, 18, 1005);
			attr_dev(span4, "class", "icon");
			add_location(span4, file, 28, 16, 967);
			add_location(span5, file, 31, 16, 1075);
			attr_dev(a4, "class", "button is-success is-inverted");
			add_location(a4, file, 27, 14, 909);
			attr_dev(span6, "class", "navbar-item");
			add_location(span6, file, 26, 12, 868);
			attr_dev(div1, "class", "navbar-end");
			add_location(div1, file, 16, 10, 592);
			attr_dev(div2, "id", "navbarMenuHeroC");
			attr_dev(div2, "class", "navbar-menu");
			add_location(div2, file, 15, 8, 535);
			attr_dev(div3, "class", "container");
			add_location(div3, file, 4, 6, 152);
			attr_dev(header, "class", "navbar");
			add_location(header, file, 3, 4, 122);
			attr_dev(div4, "class", "hero-head");
			add_location(div4, file, 2, 2, 94);
			attr_dev(h1, "class", "title");
			add_location(h1, file, 43, 6, 1330);
			attr_dev(h2, "class", "subtitle");
			add_location(h2, file, 46, 6, 1381);
			attr_dev(div5, "class", "container has-text-centered");
			add_location(div5, file, 42, 4, 1282);
			attr_dev(div6, "class", "hero-body");
			add_location(div6, file, 41, 2, 1254);
			add_location(a5, file, 57, 32, 1648);
			attr_dev(li0, "class", "is-active");
			add_location(li0, file, 57, 10, 1626);
			add_location(a6, file, 58, 14, 1683);
			add_location(li1, file, 58, 10, 1679);
			add_location(a7, file, 59, 14, 1719);
			add_location(li2, file, 59, 10, 1715);
			add_location(a8, file, 60, 14, 1750);
			add_location(li3, file, 60, 10, 1746);
			add_location(a9, file, 61, 14, 1785);
			add_location(li4, file, 61, 10, 1781);
			add_location(a10, file, 62, 14, 1822);
			add_location(li5, file, 62, 10, 1818);
			add_location(ul, file, 56, 8, 1611);
			attr_dev(div7, "class", "container");
			add_location(div7, file, 55, 6, 1579);
			attr_dev(nav, "class", "tabs is-boxed is-fullwidth");
			add_location(nav, file, 54, 4, 1532);
			attr_dev(div8, "class", "hero-foot");
			add_location(div8, file, 53, 2, 1504);
			attr_dev(section, "class", "hero is-success is-fullheight");
			add_location(section, file, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, div4);
			append_dev(div4, header);
			append_dev(header, div3);
			append_dev(div3, div0);
			append_dev(div0, a0);
			append_dev(a0, img);
			append_dev(div0, t0);
			append_dev(div0, span3);
			append_dev(span3, span0);
			append_dev(span3, t1);
			append_dev(span3, span1);
			append_dev(span3, t2);
			append_dev(span3, span2);
			append_dev(div3, t3);
			append_dev(div3, div2);
			append_dev(div2, div1);
			append_dev(div1, a1);
			append_dev(a1, t4);
			append_dev(div1, t5);
			append_dev(div1, a2);
			append_dev(a2, t6);
			append_dev(div1, t7);
			append_dev(div1, a3);
			append_dev(a3, t8);
			append_dev(div1, t9);
			append_dev(div1, span6);
			append_dev(span6, a4);
			append_dev(a4, span4);
			append_dev(span4, i);
			append_dev(a4, t10);
			append_dev(a4, span5);
			append_dev(span5, t11);
			append_dev(section, t12);
			append_dev(section, div6);
			append_dev(div6, div5);
			append_dev(div5, h1);
			append_dev(h1, t13);
			append_dev(div5, t14);
			append_dev(div5, h2);
			append_dev(h2, t15);
			append_dev(section, t16);
			append_dev(section, div8);
			append_dev(div8, nav);
			append_dev(nav, div7);
			append_dev(div7, ul);
			append_dev(ul, li0);
			append_dev(li0, a5);
			append_dev(a5, t17);
			append_dev(ul, t18);
			append_dev(ul, li1);
			append_dev(li1, a6);
			append_dev(a6, t19);
			append_dev(ul, t20);
			append_dev(ul, li2);
			append_dev(li2, a7);
			append_dev(a7, t21);
			append_dev(ul, t22);
			append_dev(ul, li3);
			append_dev(li3, a8);
			append_dev(a8, t23);
			append_dev(ul, t24);
			append_dev(ul, li4);
			append_dev(li4, a9);
			append_dev(a9, t25);
			append_dev(ul, t26);
			append_dev(ul, li5);
			append_dev(li5, a10);
			append_dev(a10, t27);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Base> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Base", $$slots, []);
	return [];
}

class Base extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Base",
			options,
			id: create_fragment.name
		});
	}
}

export default Base;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS4wM2YyYjkyOC5qcyIsInNvdXJjZXMiOltdLCJzb3VyY2VzQ29udGVudCI6W10sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
