import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, C as validate_each_argument, v as validate_slots, e as element, t as text, a as space, f as claim_element, g as children, h as claim_text, c as claim_space, b as detach_dev, j as attr_dev, k as add_location, l as insert_dev, m as append_dev, n as noop, F as empty, E as destroy_each } from './client.2252a39d.js';

/* src/routes/play.svelte generated by Svelte v3.20.1 */

const file = "src/routes/play.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	child_ctx[3] = i;
	return child_ctx;
}

// (26:0) {#each photos as photo, i}
function create_each_block(ctx) {
	let figure;
	let t0_value = /*i*/ ctx[3] + 1 + "";
	let t0;
	let t1;
	let img;
	let img_src_value;
	let img_alt_value;
	let t2;

	const block = {
		c: function create() {
			figure = element("figure");
			t0 = text(t0_value);
			t1 = text(": ");
			img = element("img");
			t2 = space();
			this.h();
		},
		l: function claim(nodes) {
			figure = claim_element(nodes, "FIGURE", {});
			var figure_nodes = children(figure);
			t0 = claim_text(figure_nodes, t0_value);
			t1 = claim_text(figure_nodes, ": ");
			img = claim_element(figure_nodes, "IMG", { src: true, alt: true });
			t2 = claim_space(figure_nodes);
			figure_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*photos*/ ctx[0].src)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*photos*/ ctx[0].alt);
			add_location(img, file, 27, 11, 554);
			add_location(figure, file, 26, 1, 534);
		},
		m: function mount(target, anchor) {
			insert_dev(target, figure, anchor);
			append_dev(figure, t0);
			append_dev(figure, t1);
			append_dev(figure, img);
			append_dev(figure, t2);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(figure);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(26:0) {#each photos as photo, i}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let each_1_anchor;
	let each_value = /*photos*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*photos*/ 1) {
				each_value = /*photos*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let photos = [
		{ src: "images/aaa.jpg", alt: "whatever" },
		{ src: "images/bbb.jpg", alt: "whatever" }
	];

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Play> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Play", $$slots, []);
	$$self.$capture_state = () => ({ photos });

	$$self.$inject_state = $$props => {
		if ("photos" in $$props) $$invalidate(0, photos = $$props.photos);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [photos];
}

class Play extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Play",
			options,
			id: create_fragment.name
		});
	}
}

export default Play;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxheS44MzZjZDUxZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JvdXRlcy9wbGF5LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8IS0tIDxzY3JpcHQ+XG5cdGxldCBjYXRzID0gW1xuXHRcdHsgaWQ6ICdKLS0tYWl5em5HUScsIG5hbWU6ICdLZXlib2FyZCBDYXQnIH0sXG5cdFx0eyBpZDogJ3pfQWJmUFhUS21zJywgbmFtZTogJ01hcnUnIH0sXG5cdFx0eyBpZDogJ09VdG4zcHZXbXBnJywgbmFtZTogJ0hlbnJpIFRoZSBFeGlzdGVudGlhbCBDYXQnIH1cblx0XTtcbjwvc2NyaXB0PlxuXG48aDE+VGhlIEZhbW91cyBDYXRzIG9mIFlvdVR1YmU8L2gxPlxuXG48dWw+XG5cdHsjZWFjaCBjYXRzIGFzIGNhdCwgaX1cblx0PGxpPjxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXtjYXQuaWR9XCI+XG5cdFx0e2kgKyAxfToge2NhdC5uYW1lfVxuXHQ8L2E+PC9saT5cbnsvZWFjaH1cbjwvdWw+IC0tPlxuXG48c2NyaXB0PlxubGV0IHBob3RvcyA9IFtcblx0eyBzcmM6ICdpbWFnZXMvYWFhLmpwZycsIGFsdDogJ3doYXRldmVyJyB9LFxuXHR7IHNyYzogJ2ltYWdlcy9iYmIuanBnJywgYWx0OiAnd2hhdGV2ZXInIH1cbl07XG48L3NjcmlwdD5cblxueyNlYWNoIHBob3RvcyBhcyBwaG90bywgaX1cblx0PGZpZ3VyZT5cblx0XHR7aSArIDF9OiA8aW1nIHNyYz17cGhvdG9zLnNyY30gYWx0PXtwaG90b3MuYWx0fT5cblx0PC9maWd1cmU+XG57L2VhY2h9XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztzQkEyQkcsR0FBQyxNQUFHLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K0NBQWEsR0FBTSxJQUFDLEdBQUc7bURBQU8sR0FBTSxJQUFDLEdBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs2QkFGekMsR0FBTTs7OztnQ0FBWCxNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRCQUFDLEdBQU07Ozs7K0JBQVgsTUFBSTs7Ozs7Ozs7Ozs7Ozs7OztvQ0FBSixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQXhCRixNQUFNO0lBQ1AsR0FBRyxFQUFFLGdCQUFnQixFQUFFLEdBQUcsRUFBRSxVQUFVO0lBQ3RDLEdBQUcsRUFBRSxnQkFBZ0IsRUFBRSxHQUFHLEVBQUUsVUFBVTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
