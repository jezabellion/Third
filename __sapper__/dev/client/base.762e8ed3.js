import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, e as element, a as space, t as text, f as claim_element, g as children, b as detach_dev, c as claim_space, h as claim_text, j as attr_dev, k as add_location, l as insert_dev, m as append_dev, n as noop } from './client.2b609bae.js';
import { d as destination, c as chapter } from './morocco.8502293d.js';

/* src/routes/base.svelte generated by Svelte v3.20.1 */
const file = "src/routes/base.svelte";

function create_fragment(ctx) {
	let section;
	let div2;
	let header;
	let div1;
	let div0;
	let a0;
	let img;
	let img_src_value;
	let t0;
	let span3;
	let span0;
	let t1;
	let span1;
	let t2;
	let span2;
	let t3;
	let div4;
	let div3;
	let h1;
	let t4;
	let t5;
	let h2;
	let t6;
	let t7;
	let div6;
	let nav;
	let div5;
	let ul;
	let li0;
	let a1;
	let t8;
	let t9;
	let li1;
	let a2;
	let t10;
	let t11;
	let li2;
	let a3;
	let t12;
	let t13;
	let li3;
	let a4;
	let t14;
	let t15;
	let li4;
	let a5;
	let t16;
	let t17;
	let li5;
	let a6;
	let t18;

	const block = {
		c: function create() {
			section = element("section");
			div2 = element("div");
			header = element("header");
			div1 = element("div");
			div0 = element("div");
			a0 = element("a");
			img = element("img");
			t0 = space();
			span3 = element("span");
			span0 = element("span");
			t1 = space();
			span1 = element("span");
			t2 = space();
			span2 = element("span");
			t3 = space();
			div4 = element("div");
			div3 = element("div");
			h1 = element("h1");
			t4 = text("Title");
			t5 = space();
			h2 = element("h2");
			t6 = text("Subtitle");
			t7 = space();
			div6 = element("div");
			nav = element("nav");
			div5 = element("div");
			ul = element("ul");
			li0 = element("li");
			a1 = element("a");
			t8 = text("Overview");
			t9 = space();
			li1 = element("li");
			a2 = element("a");
			t10 = text("Modifiers");
			t11 = space();
			li2 = element("li");
			a3 = element("a");
			t12 = text("Grid");
			t13 = space();
			li3 = element("li");
			a4 = element("a");
			t14 = text("Elements");
			t15 = space();
			li4 = element("li");
			a5 = element("a");
			t16 = text("Components");
			t17 = space();
			li5 = element("li");
			a6 = element("a");
			t18 = text("Layout");
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div2 = claim_element(section_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			header = claim_element(div2_nodes, "HEADER", { class: true });
			var header_nodes = children(header);
			div1 = claim_element(header_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			a0 = claim_element(div0_nodes, "A", { class: true });
			var a0_nodes = children(a0);
			img = claim_element(a0_nodes, "IMG", { src: true, alt: true });
			a0_nodes.forEach(detach_dev);
			t0 = claim_space(div0_nodes);
			span3 = claim_element(div0_nodes, "SPAN", { class: true, "data-target": true });
			var span3_nodes = children(span3);
			span0 = claim_element(span3_nodes, "SPAN", {});
			children(span0).forEach(detach_dev);
			t1 = claim_space(span3_nodes);
			span1 = claim_element(span3_nodes, "SPAN", {});
			children(span1).forEach(detach_dev);
			t2 = claim_space(span3_nodes);
			span2 = claim_element(span3_nodes, "SPAN", {});
			children(span2).forEach(detach_dev);
			span3_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			header_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t3 = claim_space(section_nodes);
			div4 = claim_element(section_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			h1 = claim_element(div3_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t4 = claim_text(h1_nodes, "Title");
			h1_nodes.forEach(detach_dev);
			t5 = claim_space(div3_nodes);
			h2 = claim_element(div3_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t6 = claim_text(h2_nodes, "Subtitle");
			h2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			t7 = claim_space(section_nodes);
			div6 = claim_element(section_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			nav = claim_element(div6_nodes, "NAV", { class: true });
			var nav_nodes = children(nav);
			div5 = claim_element(nav_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			ul = claim_element(div5_nodes, "UL", {});
			var ul_nodes = children(ul);
			li0 = claim_element(ul_nodes, "LI", { class: true });
			var li0_nodes = children(li0);
			a1 = claim_element(li0_nodes, "A", {});
			var a1_nodes = children(a1);
			t8 = claim_text(a1_nodes, "Overview");
			a1_nodes.forEach(detach_dev);
			li0_nodes.forEach(detach_dev);
			t9 = claim_space(ul_nodes);
			li1 = claim_element(ul_nodes, "LI", {});
			var li1_nodes = children(li1);
			a2 = claim_element(li1_nodes, "A", {});
			var a2_nodes = children(a2);
			t10 = claim_text(a2_nodes, "Modifiers");
			a2_nodes.forEach(detach_dev);
			li1_nodes.forEach(detach_dev);
			t11 = claim_space(ul_nodes);
			li2 = claim_element(ul_nodes, "LI", {});
			var li2_nodes = children(li2);
			a3 = claim_element(li2_nodes, "A", {});
			var a3_nodes = children(a3);
			t12 = claim_text(a3_nodes, "Grid");
			a3_nodes.forEach(detach_dev);
			li2_nodes.forEach(detach_dev);
			t13 = claim_space(ul_nodes);
			li3 = claim_element(ul_nodes, "LI", {});
			var li3_nodes = children(li3);
			a4 = claim_element(li3_nodes, "A", {});
			var a4_nodes = children(a4);
			t14 = claim_text(a4_nodes, "Elements");
			a4_nodes.forEach(detach_dev);
			li3_nodes.forEach(detach_dev);
			t15 = claim_space(ul_nodes);
			li4 = claim_element(ul_nodes, "LI", {});
			var li4_nodes = children(li4);
			a5 = claim_element(li4_nodes, "A", {});
			var a5_nodes = children(a5);
			t16 = claim_text(a5_nodes, "Components");
			a5_nodes.forEach(detach_dev);
			li4_nodes.forEach(detach_dev);
			t17 = claim_space(ul_nodes);
			li5 = claim_element(ul_nodes, "LI", {});
			var li5_nodes = children(li5);
			a6 = claim_element(li5_nodes, "A", {});
			var a6_nodes = children(a6);
			t18 = claim_text(a6_nodes, "Layout");
			a6_nodes.forEach(detach_dev);
			li5_nodes.forEach(detach_dev);
			ul_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			nav_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "https://bulma.io/images/bulma-type-white.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "Logo");
			add_location(img, file, 11, 12, 332);
			attr_dev(a0, "class", "navbar-item");
			add_location(a0, file, 10, 10, 296);
			add_location(span0, file, 14, 12, 503);
			add_location(span1, file, 15, 12, 529);
			add_location(span2, file, 16, 12, 555);
			attr_dev(span3, "class", "navbar-burger burger");
			attr_dev(span3, "data-target", "navbarMenuHeroC");
			add_location(span3, file, 13, 10, 425);
			attr_dev(div0, "class", "navbar-brand");
			add_location(div0, file, 9, 8, 259);
			attr_dev(div1, "class", "container");
			add_location(div1, file, 8, 6, 227);
			attr_dev(header, "class", "navbar");
			add_location(header, file, 7, 4, 197);
			attr_dev(div2, "class", "hero-head");
			add_location(div2, file, 6, 2, 169);
			attr_dev(h1, "class", "title");
			add_location(h1, file, 27, 6, 765);
			attr_dev(h2, "class", "subtitle");
			add_location(h2, file, 30, 6, 816);
			attr_dev(div3, "class", "container has-text-centered");
			add_location(div3, file, 26, 4, 717);
			attr_dev(div4, "class", "hero-body");
			add_location(div4, file, 25, 2, 689);
			add_location(a1, file, 41, 32, 1083);
			attr_dev(li0, "class", "is-active");
			add_location(li0, file, 41, 10, 1061);
			add_location(a2, file, 42, 14, 1118);
			add_location(li1, file, 42, 10, 1114);
			add_location(a3, file, 43, 14, 1154);
			add_location(li2, file, 43, 10, 1150);
			add_location(a4, file, 44, 14, 1185);
			add_location(li3, file, 44, 10, 1181);
			add_location(a5, file, 45, 14, 1220);
			add_location(li4, file, 45, 10, 1216);
			add_location(a6, file, 46, 14, 1257);
			add_location(li5, file, 46, 10, 1253);
			add_location(ul, file, 40, 8, 1046);
			attr_dev(div5, "class", "container");
			add_location(div5, file, 39, 6, 1014);
			attr_dev(nav, "class", "tabs is-boxed is-fullwidth");
			add_location(nav, file, 38, 4, 967);
			attr_dev(div6, "class", "hero-foot");
			add_location(div6, file, 37, 2, 939);
			attr_dev(section, "class", "hero is-success is-fullheight");
			add_location(section, file, 4, 0, 75);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, div2);
			append_dev(div2, header);
			append_dev(header, div1);
			append_dev(div1, div0);
			append_dev(div0, a0);
			append_dev(a0, img);
			append_dev(div0, t0);
			append_dev(div0, span3);
			append_dev(span3, span0);
			append_dev(span3, t1);
			append_dev(span3, span1);
			append_dev(span3, t2);
			append_dev(span3, span2);
			append_dev(section, t3);
			append_dev(section, div4);
			append_dev(div4, div3);
			append_dev(div3, h1);
			append_dev(h1, t4);
			append_dev(div3, t5);
			append_dev(div3, h2);
			append_dev(h2, t6);
			append_dev(section, t7);
			append_dev(section, div6);
			append_dev(div6, nav);
			append_dev(nav, div5);
			append_dev(div5, ul);
			append_dev(ul, li0);
			append_dev(li0, a1);
			append_dev(a1, t8);
			append_dev(ul, t9);
			append_dev(ul, li1);
			append_dev(li1, a2);
			append_dev(a2, t10);
			append_dev(ul, t11);
			append_dev(ul, li2);
			append_dev(li2, a3);
			append_dev(a3, t12);
			append_dev(ul, t13);
			append_dev(ul, li3);
			append_dev(li3, a4);
			append_dev(a4, t14);
			append_dev(ul, t15);
			append_dev(ul, li4);
			append_dev(li4, a5);
			append_dev(a5, t16);
			append_dev(ul, t17);
			append_dev(ul, li5);
			append_dev(li5, a6);
			append_dev(a6, t18);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Base> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Base", $$slots, []);
	$$self.$capture_state = () => ({ destination, chapter });
	return [];
}

class Base extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Base",
			options,
			id: create_fragment.name
		});
	}
}

export default Base;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS43NjJlOGVkMy5qcyIsInNvdXJjZXMiOltdLCJzb3VyY2VzQ29udGVudCI6W10sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
