import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, e as element, t as text, a as space, f as claim_element, g as children, h as claim_text, c as claim_space, b as detach_dev, k as add_location, l as insert_dev, m as append_dev, F as listen_dev, D as set_data_dev, n as noop } from './client.7769d50f.js';

/* src/routes/play.svelte generated by Svelte v3.20.1 */

const file = "src/routes/play.svelte";

function create_fragment(ctx) {
	let button;
	let t0;
	let t1;
	let t2;
	let t3_value = (/*count*/ ctx[0] === 1 ? "time" : "times") + "";
	let t3;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			t0 = text("Clicked ");
			t1 = text(/*count*/ ctx[0]);
			t2 = space();
			t3 = text(t3_value);
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", {});
			var button_nodes = children(button);
			t0 = claim_text(button_nodes, "Clicked ");
			t1 = claim_text(button_nodes, /*count*/ ctx[0]);
			t2 = claim_space(button_nodes);
			t3 = claim_text(button_nodes, t3_value);
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(button, file, 8, 0, 79);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, button, anchor);
			append_dev(button, t0);
			append_dev(button, t1);
			append_dev(button, t2);
			append_dev(button, t3);
			if (remount) dispose();
			dispose = listen_dev(button, "click", /*handleClick*/ ctx[1], false, false, false);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*count*/ 1) set_data_dev(t1, /*count*/ ctx[0]);
			if (dirty & /*count*/ 1 && t3_value !== (t3_value = (/*count*/ ctx[0] === 1 ? "time" : "times") + "")) set_data_dev(t3, t3_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let count = 0;

	function handleClick() {
		$$invalidate(0, count += 1);
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Play> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Play", $$slots, []);
	$$self.$capture_state = () => ({ count, handleClick });

	$$self.$inject_state = $$props => {
		if ("count" in $$props) $$invalidate(0, count = $$props.count);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [count, handleClick];
}

class Play extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Play",
			options,
			id: create_fragment.name
		});
	}
}

export default Play;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxheS42NTE0MjgyMi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JvdXRlcy9wbGF5LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuXHRsZXQgY291bnQgPSAwO1xuXG5cdGZ1bmN0aW9uIGhhbmRsZUNsaWNrKCkge1xuXHRjb3VudCArPSAxO1xuXHR9XG48L3NjcmlwdD5cblxuPGJ1dHRvbiBvbjpjbGljaz17aGFuZGxlQ2xpY2t9PlxuXHRDbGlja2VkIHtjb3VudH0ge2NvdW50ID09PSAxID8gJ3RpbWUnIDogJ3RpbWVzJ31cbjwvYnV0dG9uPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OzJCQVNrQixHQUFLLFFBQUssQ0FBQyxHQUFHLE1BQU0sR0FBRyxPQUFPOzs7Ozs7Ozt1QkFBdEMsR0FBSzs7Ozs7Ozs7OzJDQUFMLEdBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7eURBREcsR0FBVzs7O3VEQUNuQixHQUFLO2tFQUFHLEdBQUssUUFBSyxDQUFDLEdBQUcsTUFBTSxHQUFHLE9BQU87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FSM0MsS0FBSyxHQUFHLENBQUM7O1VBRUosV0FBVztrQkFDcEIsS0FBSyxJQUFJLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
