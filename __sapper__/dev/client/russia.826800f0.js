import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, H as validate_each_argument, v as validate_slots, e as element, c as claim_element, b as children, f as detach_dev, j as attr_dev, k as add_location, m as insert_dev, n as append_dev, p as noop, a as space, u as create_component, w as query_selector_all, g as claim_space, x as claim_component, y as mount_component, A as transition_in, B as transition_out, C as destroy_component, I as destroy_each } from './client.25833800.js';
import { d as destination } from './ModalNav.b6cb676f.js';
import { H as Hero, B as Blurb, D as Divider, S as ShoeHero, f as fade } from './ShoeHero.85315ca0.js';
import { C as ChapterHeader } from './ChapterHeader.e3424297.js';

// Travel Page Data
// Russia

const copy = {
  blurb: 'Hurtling through the streets of Saint Petersburg & Moscow. Vodka & pickles, Dostoevsky, nuclear fallout shelters and Sputik',
  travelers: 'Ben & Jeremy',
  date: '2017',
  farewell: 'Spasibo Russia!'
};

const chapter = {
      // one: 'AÃ¯t Benhaddou',
      // two: 'Erg Chebbi'
    };

const photos = {
  // Intro
   one: [
      { src: 'images/russia/a-photo_0.jpg', alt: 'yup' },
      { src: 'images/russia/a-photo_2.jpg', alt: 'yup' },
      { src: 'images/russia/a-photo_3.jpg', alt: 'yup' },
      { src: 'images/russia/a-photo_4.jpg', alt: 'yup' },
      { src: 'images/russia/a-photo_5.jpg', alt: 'yup' },
      { src: 'images/russia/a-photo_6.jpg', alt: 'yup' }

    ],
    // Soviet
    two: [
       { src: 'images/russia/b-photo_1.jpg', alt: 'yup' },
       { src: 'images/russia/b-photo_2.jpg', alt: 'yup' },
       { src: 'images/russia/b-photo_3.jpg', alt: 'yup' },
       { src: 'images/russia/h-bunker.jpg', alt: 'yup' },
       { src: 'images/russia/b-photo_4.jpg', alt: 'yup' },
       { src: 'images/russia/b-photo_5.jpg', alt: 'yup' },
       { src: 'images/russia/b-photo_6.jpg', alt: 'yup' }
     ],
     // Space
     three: [
       { src: 'images/russia/c-photo4.jpg', alt: 'yup' },
       { src: 'images/russia/h-space1.jpg', alt: 'yup' },
       { src: 'images/russia/c-photo1.jpg', alt: 'yup' },
       { src: 'images/russia/h-space2.jpg', alt: 'yup' },
       { src: 'images/russia/c-photo2.jpg', alt: 'yup' },
       { src: 'images/russia/h-space3.jpg', alt: 'yup' },
       { src: 'images/russia/c-photo3.jpg', alt: 'yup' }

     ],
     // Outside at night
      four: [
        { src: 'images/russia/d-photo3.jpg', alt: 'yup' },
        { src: 'images/russia/d-photo2.jpg', alt: 'yup' },
        { src: 'images/russia/h-church.jpg', alt: 'yup' },
        { src: 'images/russia/d-photo1.jpg', alt: 'yup' }
      ],
      // Russian Table
       five: [
         { src: 'images/russia/e-photo2.jpg', alt: 'yup' },
         { src: 'images/russia/e-photo3.jpg', alt: 'yup' },
         { src: 'images/russia/e-photo4.jpg', alt: 'yup' },
         { src: 'images/russia/e-photo1.jpg', alt: 'yup' }
       ],
       // Dostoyevsky
      six: [
        { src: 'images/russia/f-photo4.jpg', alt: 'yup' },
        { src: 'images/russia/f-photo1.jpg', alt: 'yup' },
        { src: 'images/russia/f-photo2.jpg', alt: 'yup' },
        { src: 'images/russia/f-photo3.jpg', alt: 'yup' }
      ],
      // Acrhitecture
       seven: [
         { src: 'images/russia/g-photo1.jpg', alt: 'yup' },
         { src: 'images/russia/g-photo2.jpg', alt: 'yup' },
         { src: 'images/russia/g-photo3.jpg', alt: 'yup' }
      ]
    };

/* src/routes/russia.svelte generated by Svelte v3.20.1 */
const file = "src/routes/russia.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	child_ctx[3] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	child_ctx[3] = i;
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	child_ctx[3] = i;
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	child_ctx[3] = i;
	return child_ctx;
}

function get_each_context_4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	child_ctx[3] = i;
	return child_ctx;
}

function get_each_context_5(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	child_ctx[3] = i;
	return child_ctx;
}

function get_each_context_6(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	child_ctx[3] = i;
	return child_ctx;
}

// (29:2) {#each photos.one as photo, i}
function create_each_block_6(ctx) {
	let div;
	let figure;
	let img;
	let img_src_value;
	let img_alt_value;

	const block = {
		c: function create() {
			div = element("div");
			figure = element("figure");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			figure = claim_element(div_nodes, "FIGURE", {});
			var figure_nodes = children(figure);
			img = claim_element(figure_nodes, "IMG", { src: true, alt: true });
			figure_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*photo*/ ctx[1].src)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*photo*/ ctx[1].alt);
			add_location(img, file, 30, 13, 1167);
			add_location(figure, file, 30, 5, 1159);
			attr_dev(div, "class", "container image-gallery");
			add_location(div, file, 29, 3, 1116);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, figure);
			append_dev(figure, img);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_6.name,
		type: "each",
		source: "(29:2) {#each photos.one as photo, i}",
		ctx
	});

	return block;
}

// (37:2) {#each photos.two as photo, i}
function create_each_block_5(ctx) {
	let div;
	let figure;
	let img;
	let img_src_value;
	let img_alt_value;

	const block = {
		c: function create() {
			div = element("div");
			figure = element("figure");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			figure = claim_element(div_nodes, "FIGURE", {});
			var figure_nodes = children(figure);
			img = claim_element(figure_nodes, "IMG", { src: true, alt: true });
			figure_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*photo*/ ctx[1].src)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*photo*/ ctx[1].alt);
			add_location(img, file, 38, 13, 1336);
			add_location(figure, file, 38, 5, 1328);
			attr_dev(div, "class", "container image-gallery");
			add_location(div, file, 37, 3, 1285);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, figure);
			append_dev(figure, img);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_5.name,
		type: "each",
		source: "(37:2) {#each photos.two as photo, i}",
		ctx
	});

	return block;
}

// (45:2) {#each photos.three as photo, i}
function create_each_block_4(ctx) {
	let div;
	let figure;
	let img;
	let img_src_value;
	let img_alt_value;

	const block = {
		c: function create() {
			div = element("div");
			figure = element("figure");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			figure = claim_element(div_nodes, "FIGURE", {});
			var figure_nodes = children(figure);
			img = claim_element(figure_nodes, "IMG", { src: true, alt: true });
			figure_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*photo*/ ctx[1].src)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*photo*/ ctx[1].alt);
			add_location(img, file, 46, 13, 1507);
			add_location(figure, file, 46, 5, 1499);
			attr_dev(div, "class", "container image-gallery");
			add_location(div, file, 45, 3, 1456);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, figure);
			append_dev(figure, img);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_4.name,
		type: "each",
		source: "(45:2) {#each photos.three as photo, i}",
		ctx
	});

	return block;
}

// (53:2) {#each photos.four as photo, i}
function create_each_block_3(ctx) {
	let div;
	let figure;
	let img;
	let img_src_value;
	let img_alt_value;

	const block = {
		c: function create() {
			div = element("div");
			figure = element("figure");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			figure = claim_element(div_nodes, "FIGURE", {});
			var figure_nodes = children(figure);
			img = claim_element(figure_nodes, "IMG", { src: true, alt: true });
			figure_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*photo*/ ctx[1].src)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*photo*/ ctx[1].alt);
			add_location(img, file, 54, 13, 1677);
			add_location(figure, file, 54, 5, 1669);
			attr_dev(div, "class", "container image-gallery");
			add_location(div, file, 53, 3, 1626);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, figure);
			append_dev(figure, img);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_3.name,
		type: "each",
		source: "(53:2) {#each photos.four as photo, i}",
		ctx
	});

	return block;
}

// (61:2) {#each photos.five as photo, i}
function create_each_block_2(ctx) {
	let div;
	let figure;
	let img;
	let img_src_value;
	let img_alt_value;

	const block = {
		c: function create() {
			div = element("div");
			figure = element("figure");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			figure = claim_element(div_nodes, "FIGURE", {});
			var figure_nodes = children(figure);
			img = claim_element(figure_nodes, "IMG", { src: true, alt: true });
			figure_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*photo*/ ctx[1].src)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*photo*/ ctx[1].alt);
			add_location(img, file, 62, 13, 1847);
			add_location(figure, file, 62, 5, 1839);
			attr_dev(div, "class", "container image-gallery");
			add_location(div, file, 61, 3, 1796);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, figure);
			append_dev(figure, img);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(61:2) {#each photos.five as photo, i}",
		ctx
	});

	return block;
}

// (69:2) {#each photos.six as photo, i}
function create_each_block_1(ctx) {
	let div;
	let figure;
	let img;
	let img_src_value;
	let img_alt_value;

	const block = {
		c: function create() {
			div = element("div");
			figure = element("figure");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			figure = claim_element(div_nodes, "FIGURE", {});
			var figure_nodes = children(figure);
			img = claim_element(figure_nodes, "IMG", { src: true, alt: true });
			figure_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*photo*/ ctx[1].src)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*photo*/ ctx[1].alt);
			add_location(img, file, 70, 13, 2016);
			add_location(figure, file, 70, 5, 2008);
			attr_dev(div, "class", "container image-gallery");
			add_location(div, file, 69, 3, 1965);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, figure);
			append_dev(figure, img);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(69:2) {#each photos.six as photo, i}",
		ctx
	});

	return block;
}

// (75:2) {#each photos.seven as photo, i}
function create_each_block(ctx) {
	let div;
	let figure;
	let img;
	let img_src_value;
	let img_alt_value;

	const block = {
		c: function create() {
			div = element("div");
			figure = element("figure");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			figure = claim_element(div_nodes, "FIGURE", {});
			var figure_nodes = children(figure);
			img = claim_element(figure_nodes, "IMG", { src: true, alt: true });
			figure_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*photo*/ ctx[1].src)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*photo*/ ctx[1].alt);
			add_location(img, file, 76, 13, 2173);
			add_location(figure, file, 76, 5, 2165);
			attr_dev(div, "class", "container image-gallery");
			add_location(div, file, 75, 3, 2122);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, figure);
			append_dev(figure, img);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(75:2) {#each photos.seven as photo, i}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let title_value;
	let meta0;
	let meta0_content_value;
	let meta1;
	let meta2;
	let meta3;
	let meta4;
	let meta4_content_value;
	let t0;
	let div;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let t8;
	let t9;
	let t10;
	let t11;
	let t12;
	let t13;
	let t14;
	let t15;
	let current;
	document.title = title_value = "" + (destination.four + " | " + destination.home);

	const hero = new Hero({
			props: {
				current: "russia",
				destHead: destination.four
			},
			$$inline: true
		});

	const blurb = new Blurb({
			props: {
				dateCopy: copy.date,
				TravlerCopy: copy.travelers,
				blurbCopy: copy.blurb
			},
			$$inline: true
		});

	let each_value_6 = photos.one;
	validate_each_argument(each_value_6);
	let each_blocks_6 = [];

	for (let i = 0; i < each_value_6.length; i += 1) {
		each_blocks_6[i] = create_each_block_6(get_each_context_6(ctx, each_value_6, i));
	}

	const divider0 = new Divider({ $$inline: true });
	let each_value_5 = photos.two;
	validate_each_argument(each_value_5);
	let each_blocks_5 = [];

	for (let i = 0; i < each_value_5.length; i += 1) {
		each_blocks_5[i] = create_each_block_5(get_each_context_5(ctx, each_value_5, i));
	}

	const divider1 = new Divider({ $$inline: true });
	let each_value_4 = photos.three;
	validate_each_argument(each_value_4);
	let each_blocks_4 = [];

	for (let i = 0; i < each_value_4.length; i += 1) {
		each_blocks_4[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
	}

	const divider2 = new Divider({ $$inline: true });
	let each_value_3 = photos.four;
	validate_each_argument(each_value_3);
	let each_blocks_3 = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks_3[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	const divider3 = new Divider({ $$inline: true });
	let each_value_2 = photos.five;
	validate_each_argument(each_value_2);
	let each_blocks_2 = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks_2[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	const divider4 = new Divider({ $$inline: true });
	let each_value_1 = photos.six;
	validate_each_argument(each_value_1);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = photos.seven;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const chapterheader = new ChapterHeader({
			props: { title: copy.farewell },
			$$inline: true
		});

	const shoehero = new ShoeHero({ $$inline: true });

	const block = {
		c: function create() {
			meta0 = element("meta");
			meta1 = element("meta");
			meta2 = element("meta");
			meta3 = element("meta");
			meta4 = element("meta");
			t0 = space();
			div = element("div");
			create_component(hero.$$.fragment);
			t1 = space();
			create_component(blurb.$$.fragment);
			t2 = space();

			for (let i = 0; i < each_blocks_6.length; i += 1) {
				each_blocks_6[i].c();
			}

			t3 = space();
			create_component(divider0.$$.fragment);
			t4 = space();

			for (let i = 0; i < each_blocks_5.length; i += 1) {
				each_blocks_5[i].c();
			}

			t5 = space();
			create_component(divider1.$$.fragment);
			t6 = space();

			for (let i = 0; i < each_blocks_4.length; i += 1) {
				each_blocks_4[i].c();
			}

			t7 = space();
			create_component(divider2.$$.fragment);
			t8 = space();

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				each_blocks_3[i].c();
			}

			t9 = space();
			create_component(divider3.$$.fragment);
			t10 = space();

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].c();
			}

			t11 = space();
			create_component(divider4.$$.fragment);
			t12 = space();

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t13 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t14 = space();
			create_component(chapterheader.$$.fragment);
			t15 = space();
			create_component(shoehero.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1h66sj5\"]", document.head);
			meta0 = claim_element(head_nodes, "META", { property: true, content: true });
			meta1 = claim_element(head_nodes, "META", { property: true, content: true });
			meta2 = claim_element(head_nodes, "META", { property: true, content: true });
			meta3 = claim_element(head_nodes, "META", { property: true, content: true });
			meta4 = claim_element(head_nodes, "META", { property: true, content: true });
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(hero.$$.fragment, div_nodes);
			t1 = claim_space(div_nodes);
			claim_component(blurb.$$.fragment, div_nodes);
			t2 = claim_space(div_nodes);

			for (let i = 0; i < each_blocks_6.length; i += 1) {
				each_blocks_6[i].l(div_nodes);
			}

			t3 = claim_space(div_nodes);
			claim_component(divider0.$$.fragment, div_nodes);
			t4 = claim_space(div_nodes);

			for (let i = 0; i < each_blocks_5.length; i += 1) {
				each_blocks_5[i].l(div_nodes);
			}

			t5 = claim_space(div_nodes);
			claim_component(divider1.$$.fragment, div_nodes);
			t6 = claim_space(div_nodes);

			for (let i = 0; i < each_blocks_4.length; i += 1) {
				each_blocks_4[i].l(div_nodes);
			}

			t7 = claim_space(div_nodes);
			claim_component(divider2.$$.fragment, div_nodes);
			t8 = claim_space(div_nodes);

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				each_blocks_3[i].l(div_nodes);
			}

			t9 = claim_space(div_nodes);
			claim_component(divider3.$$.fragment, div_nodes);
			t10 = claim_space(div_nodes);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].l(div_nodes);
			}

			t11 = claim_space(div_nodes);
			claim_component(divider4.$$.fragment, div_nodes);
			t12 = claim_space(div_nodes);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(div_nodes);
			}

			t13 = claim_space(div_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			t14 = claim_space(div_nodes);
			claim_component(chapterheader.$$.fragment, div_nodes);
			t15 = claim_space(div_nodes);
			claim_component(shoehero.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta0, "property", "og:title");
			attr_dev(meta0, "content", meta0_content_value = destination.four);
			add_location(meta0, file, 16, 2, 544);
			attr_dev(meta1, "property", "og:type");
			attr_dev(meta1, "content", "website");
			add_location(meta1, file, 17, 2, 604);
			attr_dev(meta2, "property", "og:url");
			attr_dev(meta2, "content", "https://rambling-man.netlify.com/russia");
			add_location(meta2, file, 18, 2, 652);
			attr_dev(meta3, "property", "og:image");
			attr_dev(meta3, "content", "https://rambling-man.netlify.com/images/social-images/russia-og.jpg");
			add_location(meta3, file, 19, 2, 731);
			attr_dev(meta4, "property", "og:description");
			attr_dev(meta4, "content", meta4_content_value = copy.blurb);
			add_location(meta4, file, 20, 2, 840);
			attr_dev(div, "class", "travelPage");
			add_location(div, file, 23, 0, 914);
		},
		m: function mount(target, anchor) {
			append_dev(document.head, meta0);
			append_dev(document.head, meta1);
			append_dev(document.head, meta2);
			append_dev(document.head, meta3);
			append_dev(document.head, meta4);
			insert_dev(target, t0, anchor);
			insert_dev(target, div, anchor);
			mount_component(hero, div, null);
			append_dev(div, t1);
			mount_component(blurb, div, null);
			append_dev(div, t2);

			for (let i = 0; i < each_blocks_6.length; i += 1) {
				each_blocks_6[i].m(div, null);
			}

			append_dev(div, t3);
			mount_component(divider0, div, null);
			append_dev(div, t4);

			for (let i = 0; i < each_blocks_5.length; i += 1) {
				each_blocks_5[i].m(div, null);
			}

			append_dev(div, t5);
			mount_component(divider1, div, null);
			append_dev(div, t6);

			for (let i = 0; i < each_blocks_4.length; i += 1) {
				each_blocks_4[i].m(div, null);
			}

			append_dev(div, t7);
			mount_component(divider2, div, null);
			append_dev(div, t8);

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				each_blocks_3[i].m(div, null);
			}

			append_dev(div, t9);
			mount_component(divider3, div, null);
			append_dev(div, t10);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].m(div, null);
			}

			append_dev(div, t11);
			mount_component(divider4, div, null);
			append_dev(div, t12);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div, null);
			}

			append_dev(div, t13);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			append_dev(div, t14);
			mount_component(chapterheader, div, null);
			append_dev(div, t15);
			mount_component(shoehero, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*destination*/ 0) && title_value !== (title_value = "" + (destination.four + " | " + destination.home))) {
				document.title = title_value;
			}

			if (dirty & /*photos*/ 0) {
				each_value_6 = photos.one;
				validate_each_argument(each_value_6);
				let i;

				for (i = 0; i < each_value_6.length; i += 1) {
					const child_ctx = get_each_context_6(ctx, each_value_6, i);

					if (each_blocks_6[i]) {
						each_blocks_6[i].p(child_ctx, dirty);
					} else {
						each_blocks_6[i] = create_each_block_6(child_ctx);
						each_blocks_6[i].c();
						each_blocks_6[i].m(div, t3);
					}
				}

				for (; i < each_blocks_6.length; i += 1) {
					each_blocks_6[i].d(1);
				}

				each_blocks_6.length = each_value_6.length;
			}

			if (dirty & /*photos*/ 0) {
				each_value_5 = photos.two;
				validate_each_argument(each_value_5);
				let i;

				for (i = 0; i < each_value_5.length; i += 1) {
					const child_ctx = get_each_context_5(ctx, each_value_5, i);

					if (each_blocks_5[i]) {
						each_blocks_5[i].p(child_ctx, dirty);
					} else {
						each_blocks_5[i] = create_each_block_5(child_ctx);
						each_blocks_5[i].c();
						each_blocks_5[i].m(div, t5);
					}
				}

				for (; i < each_blocks_5.length; i += 1) {
					each_blocks_5[i].d(1);
				}

				each_blocks_5.length = each_value_5.length;
			}

			if (dirty & /*photos*/ 0) {
				each_value_4 = photos.three;
				validate_each_argument(each_value_4);
				let i;

				for (i = 0; i < each_value_4.length; i += 1) {
					const child_ctx = get_each_context_4(ctx, each_value_4, i);

					if (each_blocks_4[i]) {
						each_blocks_4[i].p(child_ctx, dirty);
					} else {
						each_blocks_4[i] = create_each_block_4(child_ctx);
						each_blocks_4[i].c();
						each_blocks_4[i].m(div, t7);
					}
				}

				for (; i < each_blocks_4.length; i += 1) {
					each_blocks_4[i].d(1);
				}

				each_blocks_4.length = each_value_4.length;
			}

			if (dirty & /*photos*/ 0) {
				each_value_3 = photos.four;
				validate_each_argument(each_value_3);
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks_3[i]) {
						each_blocks_3[i].p(child_ctx, dirty);
					} else {
						each_blocks_3[i] = create_each_block_3(child_ctx);
						each_blocks_3[i].c();
						each_blocks_3[i].m(div, t9);
					}
				}

				for (; i < each_blocks_3.length; i += 1) {
					each_blocks_3[i].d(1);
				}

				each_blocks_3.length = each_value_3.length;
			}

			if (dirty & /*photos*/ 0) {
				each_value_2 = photos.five;
				validate_each_argument(each_value_2);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks_2[i]) {
						each_blocks_2[i].p(child_ctx, dirty);
					} else {
						each_blocks_2[i] = create_each_block_2(child_ctx);
						each_blocks_2[i].c();
						each_blocks_2[i].m(div, t11);
					}
				}

				for (; i < each_blocks_2.length; i += 1) {
					each_blocks_2[i].d(1);
				}

				each_blocks_2.length = each_value_2.length;
			}

			if (dirty & /*photos*/ 0) {
				each_value_1 = photos.six;
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(div, t13);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty & /*photos*/ 0) {
				each_value = photos.seven;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, t14);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(hero.$$.fragment, local);
			transition_in(blurb.$$.fragment, local);
			transition_in(divider0.$$.fragment, local);
			transition_in(divider1.$$.fragment, local);
			transition_in(divider2.$$.fragment, local);
			transition_in(divider3.$$.fragment, local);
			transition_in(divider4.$$.fragment, local);
			transition_in(chapterheader.$$.fragment, local);
			transition_in(shoehero.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(hero.$$.fragment, local);
			transition_out(blurb.$$.fragment, local);
			transition_out(divider0.$$.fragment, local);
			transition_out(divider1.$$.fragment, local);
			transition_out(divider2.$$.fragment, local);
			transition_out(divider3.$$.fragment, local);
			transition_out(divider4.$$.fragment, local);
			transition_out(chapterheader.$$.fragment, local);
			transition_out(shoehero.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			detach_dev(meta0);
			detach_dev(meta1);
			detach_dev(meta2);
			detach_dev(meta3);
			detach_dev(meta4);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div);
			destroy_component(hero);
			destroy_component(blurb);
			destroy_each(each_blocks_6, detaching);
			destroy_component(divider0);
			destroy_each(each_blocks_5, detaching);
			destroy_component(divider1);
			destroy_each(each_blocks_4, detaching);
			destroy_component(divider2);
			destroy_each(each_blocks_3, detaching);
			destroy_component(divider3);
			destroy_each(each_blocks_2, detaching);
			destroy_component(divider4);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
			destroy_component(chapterheader);
			destroy_component(shoehero);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let visible = true;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Russia> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Russia", $$slots, []);

	$$self.$capture_state = () => ({
		Hero,
		Divider,
		Blurb,
		ChapterHeader,
		ShoeHero,
		fade,
		destination,
		copy,
		chapter,
		photos,
		visible
	});

	$$self.$inject_state = $$props => {
		if ("visible" in $$props) visible = $$props.visible;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [];
}

class Russia extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Russia",
			options,
			id: create_fragment.name
		});
	}
}

export default Russia;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
